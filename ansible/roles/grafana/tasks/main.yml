- name: Download Grafana
  get_url:
    url: https://dl.grafana.com/oss/release/grafana_6.2.4_amd64.deb
    dest: /home/azureuser
    mode: '0440'

- name: Install Grafana using dpkg
  become: yes
  command: dpkg -i --force-depends /home/azureuser/grafana_6.2.4_amd64.deb

- name: "Grafana server started"
  service:
    name: grafana-server
    enabled: true
    state: started

- name: "Add flask dashboard"
  community.grafana.grafana_dashboard:
    grafana_url: "{{ groups['monitoring'][0] }}:3000/"
    state: present
    overwrite: yes
    path: https://gist.githubusercontent.com/AndreasArne/433f902f9b986c301f2b2877454a581f/raw/4898bb2013b469cf74ace82d2d5aa39e073cb069/flaskdash.json

- name: "Add mysql dashboard"
  community.grafana.grafana_dashboard:
    grafana_url: "{{ groups['monitoring'][0] }}:3000/"
    state: present
    overwrite: yes
    dashboard_id: 6239

- name: "Add nginx dashboard"
  community.grafana.grafana_dashboard:
    grafana_url: "{{ groups['monitoring'][0] }}:3000/"
    state: present
    overwrite: yes
    dashboard_id: 12708

- name: "Add node dashboard"
  community.grafana.grafana_dashboard:
    grafana_url: "{{ groups['monitoring'][0] }}:3000/"
    state: present
    overwrite: yes
    dashboard_id: 1860
    
# - name: Create empty grafana-data volume
#   docker_volume:
#     name: grafana-data

# - name: Install node-exporter
#   docker_container:
#     name: "grafana"
#     image: "grafana/grafana"
#     restart_policy: unless-stopped
#     # state: started
#     pull: yes
#     volumes:
#       - grafana-data:/var/lib/grafana
#     # network_mode: host
#     network_mode: default
#     networks:
#       - name: monitor
#     recreate: yes
#     ports:
#       - "3000:3000"

# - name: "Check if Grafana is accessible."
#   uri:
#     url: http://127.0.0.1:3000
#     method: GET
#     status_code: 200